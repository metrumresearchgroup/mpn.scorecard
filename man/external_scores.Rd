% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/external.R
\name{external_scores}
\alias{external_scores}
\alias{render_external}
\title{Rendering externally scored packages}
\description{
For R packages, mpn.scorecard handles both scoring and rendering. The
workflow is to first score the package with \code{\link[=score_pkg]{score_pkg()}}, then to optionally
generate a traceability matrix with \code{\link[=make_traceability_matrix]{make_traceability_matrix()}}, and finally
to render the scorecard with \code{\link[=render_scorecard]{render_scorecard()}}.

\code{\link[=render_scorecard]{render_scorecard()}} also supports rendering packages that are scored outside
of mpn.scorecard. The scorer is responsible for preparing a results directory
with the set of files described below.
}
\details{
\subsection{Input files}{

The following input files define results for the scorecard to render. These
must reside in a directory named \verb{<package>_<version>}, following the naming
of the output directory returned by \code{\link[=score_pkg]{score_pkg()}}.
\itemize{
\item \verb{<package>_<version>.pkg.json}: This file provides general information
about the package being scored.  It requires the following keys:
\itemize{
\item \code{mpn_scorecard_format}: The version of the format in which these input
files are specified. This should be "1.0".
\item \code{pkg_name}, \code{pkg_version}: The name and version of the package.
\item \code{scorecard_type}: The type of package. Two types are currently
recognized and receive special handling: "R" and "cli". Everything else
falls back to default handling.

If you're specifying "R" here, you should probably use \code{\link[=score_pkg]{score_pkg()}}
instead.
}

Example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{\{
  "mpn_scorecard_format": "1.0",
  "pkg_name": "foo",
  "pkg_version": "1.2.3",
  "scorecard_type": "cli"
\}
}\if{html}{\out{</div>}}
\item \verb{<package>_<version>.check.txt}: Output from the package check. This is
included in the appendix verbatim.
\item \verb{<package>_<version>.coverage.json}: Code coverage percentages. The values
will be rounded to two decimal places when rendering. This file is
optional.

Example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{\{
  "overall": 91.54265,
  "files": [
    \{
      "file": "cmd/foo.go",
      "coverage": 98.7643
    \},
    \{
      "file": "cmd/bar.go",
      "coverage": 84.321
    \}
  ]
\}
}\if{html}{\out{</div>}}
\item \verb{<package>_<version>.scores.json}: Scores for individual metrics grouped
into four categories: "testing", "documentation", "maintenance", and
"transparency". Each category must have a least one score.

For the testing category, "check is required. "check" should be 1 if the
tests passed and 0 if they failed. "coverage" is required if the
\verb{<package>_<version>.coverage.json} coverage" file exists.  The value
should match the "overall" value from \verb{<package>_<version>.coverage.json},
divided by 100.

Example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{\{
  "testing": \{
    "check": 1,
    "coverage": 0.9154265
  \},
  "documentation": \{
    "has_website": 1,
    "has_news": 1
  \},
  "maintenance": \{
    "has_maintainer": 1,
    "news_current": 1
  \},
  "transparency": \{
    "has_source_control": 1,
    "has_bug_reports_url": 1
  \}
\}
}\if{html}{\out{</div>}}
\item \verb{<package>_<version>.metadata.json}: Information to include in the
"System Info" table. The table will include the "date" and "executor"
value, as well as any key-value pairs defined under "info.env_vars" and
"info.sys". The "date" and "executor" keys are required.

Example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{\{
  "date": "2024-08-01 08:19:12",
  "executor": "Bobert",
  "info": \{
    "env_vars": \{
      "METWORX_VERSION": "22.09"
    \},
    "sys": \{
      "sysname": "Linux",
      "machine": "x86_64"
    \}
  \}
\}
}\if{html}{\out{</div>}}
\item \verb{<package>_<version>.matrix.yaml}: A file defining entries to render as
the traceability matrix table. The traceability matrix table is meant to
map all user-facing entry points (e.g., exported functions or available
commands for a command-line executable) to the relevant documentation and
test files.

The file should consist of a sequence of entries with the following items:
\itemize{
\item \code{entrypoint}: The name of the entry point.
\item \code{code}: The path to where the entry point is defined.
\item \code{doc}: The path to the entry point's main documentation.
\item \code{tests}: A list of paths where the entry point is tested.
}

What the entry point is called in the table depends on \code{scorecard_type}.
For "cli", the column name is "Command" and, for "R", it is
"Exported Function". For all other types, it is "Entry Point".

This file is optional if the \code{add_traceability} argument of
\code{\link[=render_scorecard]{render_scorecard()}} is "auto" or \code{FALSE}.

Example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{- entrypoint: foo
  skip: true

- entrypoint: foo bar
  code: cmd/bar.go
  doc: docs/commands/foo_bar.md
  tests:
    - cmd/bar_test.go
    - integration/bar_test.go
}\if{html}{\out{</div>}}
}
}
}
